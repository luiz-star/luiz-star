name: Build and Scan Docker

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build_and_scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure Dockerfile exists
        shell: bash
        run: |
          set -e
          if [ ! -f Dockerfile ]; then
            echo "Dockerfile not found in repo root. Creating a minimal one for the first run."
            {
              printf "FROM python:3.10-slim\n"
              printf "WORKDIR /app\n"
              printf "COPY . .\n"
              printf "CMD [\"python\",\"-V\"]\n"
            } > Dockerfile
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      # Build a local image and load it into the Docker daemon so Trivy can see it
      - name: Build image (load into local daemon)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          load: true              # <— garante que a imagem apareça como 'docker images'
          tags: local/app:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Verify image exists locally
        shell: bash
        run: |
          set -e
          docker image inspect local/app:latest > /dev/null
          echo "Image local/app:latest is available locally."

      - name: Install Trivy
        uses: aquasecurity/setup-trivy@v0.2.1

      - name: Scan image with Trivy (report HIGH/CRITICAL, fail on CRITICAL)
        shell: bash
        run: |
          set -e
          echo "Running informational scan (HIGH,CRITICAL - will not fail)..."
          trivy image --format table --ignore-unfixed --exit-code 0 --severity HIGH,CRITICAL local/app:latest
          echo "Enforcing failure on CRITICAL only..."
          trivy image --format table --ignore-unfixed --exit-code 1 --severity CRITICAL local/app:latest
